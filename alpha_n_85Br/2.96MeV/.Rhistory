#effr = 0.22
prob_dist[1, "effr"] = effr
prob_dist[1, "prob"] = prob_observed(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
#if (prob_dist[1, "prob"] > 1e-70) return ( prob_dist )
return ( prob_dist )
}
})[3]
print(ptime)
prob_dist = table
#prob_dist = rbind(prob_dist, prob_dist_cum)
#prob_dist_cum = prob_dist
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
a1_mean = 90/factorCS
da1 =     6/factorCS
a2_mean = 30/factorCS
da2 =     6/factorCS
ptime <- system.time({
ind = rownames(prob_dist_beam)
table <- foreach(k=1:1000, .combine = rbind, .verbose = F, .errorhandling = "remove") %dopar% {
prob_dist = data.frame(
n1 = numeric(0),      # rate of room background event creating 1 neutron
n2 = numeric(0),      # rate of room background event creating 2 neutrons
b1 = numeric(0),      # rate of beam-induced background event creating 1 neutron
b2 = numeric(0),      # rate of beam-induced background event creating 2 neutrons
b3 = numeric(0),      # rate of beam-induced background event creating 3 neutrons
b4 = numeric(0),      # rate of beam-induced background event creating 4 neutrons
b5 = numeric(0),      # rate of beam-induced background event creating 5 neutrons
a1 = numeric(0),      # rate of reaction-induced event creating 1 neutron
a2 = numeric(0),      # rate of reaction-induced event creating 2 neutrons
effn = numeric(0),    # neutron detection efficiency room background neutrons
effb = numeric(0),    # neutron detection efficiency beam-induced background neutrons
effr = numeric(0),    # neutron detection efficiency reaction-induced neutrons
prob = numeric(0)     # probability
)
# Quantities obtained from MLH analysis of room and beam-induced background data
indx = sample(ind,1)
print(indx)
effn = prob_dist_beam[indx,"effn"]
effb = prob_dist_beam[indx,"effb"]
n1 =   prob_dist_beam[indx,"n1"]
n2 =   prob_dist_beam[indx,"n2"]
b1 =   prob_dist_beam[indx,"b1"]*beam_ratio
b2 =   prob_dist_beam[indx,"b2"]*beam_ratio
b3 =   prob_dist_beam[indx,"b3"]*beam_ratio
b4 =   prob_dist_beam[indx,"b4"]*beam_ratio
b5 =   prob_dist_beam[indx,"b5"]*beam_ratio
prob_dist[1, "n1"] = n1
prob_dist[1, "n2"] = n2
prob_dist[1, "b1"] = b1
prob_dist[1, "b2"] = b2
prob_dist[1, "b3"] = b3
prob_dist[1, "b4"] = b4
prob_dist[1, "b5"] = b5
# New quantities to be determined:
a1 = runif(1, a1_mean-da1, a1_mean+da1)
# a1 = 0
prob_dist[1, "a1"] = a1
a2 = runif(1, a2_mean-da2, a2_mean+da2)
# a2 = 0
prob_dist[1, "a2"] = a2
prob_dist[1, "effn"] = effn
prob_dist[1, "effb"] = effb
effr = runif(1, 0.17, 0.27)
#effr = 0.22
prob_dist[1, "effr"] = effr
prob_dist[1, "prob"] = prob_observed(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
#if (prob_dist[1, "prob"] > 1e-70) return ( prob_dist )
return ( prob_dist )
}
})[3]
print(ptime)
prob_dist = table
#prob_dist = rbind(prob_dist, prob_dist_cum)
#prob_dist_cum = prob_dist
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
a1_mean = 90/factorCS
da1 =     6/factorCS
a2_mean = 40/factorCS
da2 =     15/factorCS
ptime <- system.time({
ind = rownames(prob_dist_beam)
table <- foreach(k=1:1000, .combine = rbind, .verbose = F, .errorhandling = "remove") %dopar% {
prob_dist = data.frame(
n1 = numeric(0),      # rate of room background event creating 1 neutron
n2 = numeric(0),      # rate of room background event creating 2 neutrons
b1 = numeric(0),      # rate of beam-induced background event creating 1 neutron
b2 = numeric(0),      # rate of beam-induced background event creating 2 neutrons
b3 = numeric(0),      # rate of beam-induced background event creating 3 neutrons
b4 = numeric(0),      # rate of beam-induced background event creating 4 neutrons
b5 = numeric(0),      # rate of beam-induced background event creating 5 neutrons
a1 = numeric(0),      # rate of reaction-induced event creating 1 neutron
a2 = numeric(0),      # rate of reaction-induced event creating 2 neutrons
effn = numeric(0),    # neutron detection efficiency room background neutrons
effb = numeric(0),    # neutron detection efficiency beam-induced background neutrons
effr = numeric(0),    # neutron detection efficiency reaction-induced neutrons
prob = numeric(0)     # probability
)
# Quantities obtained from MLH analysis of room and beam-induced background data
indx = sample(ind,1)
print(indx)
effn = prob_dist_beam[indx,"effn"]
effb = prob_dist_beam[indx,"effb"]
n1 =   prob_dist_beam[indx,"n1"]
n2 =   prob_dist_beam[indx,"n2"]
b1 =   prob_dist_beam[indx,"b1"]*beam_ratio
b2 =   prob_dist_beam[indx,"b2"]*beam_ratio
b3 =   prob_dist_beam[indx,"b3"]*beam_ratio
b4 =   prob_dist_beam[indx,"b4"]*beam_ratio
b5 =   prob_dist_beam[indx,"b5"]*beam_ratio
prob_dist[1, "n1"] = n1
prob_dist[1, "n2"] = n2
prob_dist[1, "b1"] = b1
prob_dist[1, "b2"] = b2
prob_dist[1, "b3"] = b3
prob_dist[1, "b4"] = b4
prob_dist[1, "b5"] = b5
# New quantities to be determined:
a1 = runif(1, a1_mean-da1, a1_mean+da1)
# a1 = 0
prob_dist[1, "a1"] = a1
a2 = runif(1, a2_mean-da2, a2_mean+da2)
# a2 = 0
prob_dist[1, "a2"] = a2
prob_dist[1, "effn"] = effn
prob_dist[1, "effb"] = effb
effr = runif(1, 0.17, 0.27)
#effr = 0.22
prob_dist[1, "effr"] = effr
prob_dist[1, "prob"] = prob_observed(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
#if (prob_dist[1, "prob"] > 1e-70) return ( prob_dist )
return ( prob_dist )
}
})[3]
print(ptime)
prob_dist = table
#prob_dist = rbind(prob_dist, prob_dist_cum)
#prob_dist_cum = prob_dist
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
a1_mean = 90/factorCS
da1 =     10/factorCS
a2_mean = 40/factorCS
da2 =     25/factorCS
ptime <- system.time({
ind = rownames(prob_dist_beam)
table <- foreach(k=1:10000, .combine = rbind, .verbose = F, .errorhandling = "remove") %dopar% {
prob_dist = data.frame(
n1 = numeric(0),      # rate of room background event creating 1 neutron
n2 = numeric(0),      # rate of room background event creating 2 neutrons
b1 = numeric(0),      # rate of beam-induced background event creating 1 neutron
b2 = numeric(0),      # rate of beam-induced background event creating 2 neutrons
b3 = numeric(0),      # rate of beam-induced background event creating 3 neutrons
b4 = numeric(0),      # rate of beam-induced background event creating 4 neutrons
b5 = numeric(0),      # rate of beam-induced background event creating 5 neutrons
a1 = numeric(0),      # rate of reaction-induced event creating 1 neutron
a2 = numeric(0),      # rate of reaction-induced event creating 2 neutrons
effn = numeric(0),    # neutron detection efficiency room background neutrons
effb = numeric(0),    # neutron detection efficiency beam-induced background neutrons
effr = numeric(0),    # neutron detection efficiency reaction-induced neutrons
prob = numeric(0)     # probability
)
# Quantities obtained from MLH analysis of room and beam-induced background data
indx = sample(ind,1)
print(indx)
effn = prob_dist_beam[indx,"effn"]
effb = prob_dist_beam[indx,"effb"]
n1 =   prob_dist_beam[indx,"n1"]
n2 =   prob_dist_beam[indx,"n2"]
b1 =   prob_dist_beam[indx,"b1"]*beam_ratio
b2 =   prob_dist_beam[indx,"b2"]*beam_ratio
b3 =   prob_dist_beam[indx,"b3"]*beam_ratio
b4 =   prob_dist_beam[indx,"b4"]*beam_ratio
b5 =   prob_dist_beam[indx,"b5"]*beam_ratio
prob_dist[1, "n1"] = n1
prob_dist[1, "n2"] = n2
prob_dist[1, "b1"] = b1
prob_dist[1, "b2"] = b2
prob_dist[1, "b3"] = b3
prob_dist[1, "b4"] = b4
prob_dist[1, "b5"] = b5
# New quantities to be determined:
a1 = runif(1, a1_mean-da1, a1_mean+da1)
# a1 = 0
prob_dist[1, "a1"] = a1
a2 = runif(1, a2_mean-da2, a2_mean+da2)
# a2 = 0
prob_dist[1, "a2"] = a2
prob_dist[1, "effn"] = effn
prob_dist[1, "effb"] = effb
effr = runif(1, 0.17, 0.27)
#effr = 0.22
prob_dist[1, "effr"] = effr
prob_dist[1, "prob"] = prob_observed(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
#if (prob_dist[1, "prob"] > 1e-70) return ( prob_dist )
return ( prob_dist )
}
})[3]
print(ptime)
prob_dist = table
#prob_dist = rbind(prob_dist, prob_dist_cum)
#prob_dist_cum = prob_dist
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
90/factorCS
prob_dist[prob_dist$prob == max(prob_dist$prob),]
print(maxP$a1*factorCS)
print(maxP$a2*factorCS)
maxP = prob_dist[prob_dist$prob == max(prob_dist$prob),]
print(maxP$a1*factorCS)
print(maxP$a2*factorCS)
prob_dist = prob_dist[prob_dist$prob > maxP$prob*0.001,]
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
library(plotly)
# Parallel computing
library(doParallel)
registerDoParallel(cores=4)
# Combinatorial function
comb = function(n, x) {
factorial(n) / factorial(n-x) / factorial(x)
}
# Function returning probability of detecting det number of neutrons in time-window
# coming from source producing orig number of neutrons
prob_det_sour = function(det, orig, rate, eff) {
prob = 0
for(i in ceiling(det/orig):10) {
prob = prob + dpois(i, rate)*eff^det*(1-eff)^(orig*i-det)*comb(orig*i, det)
}
return( prob )
}
# Function returning probability of detected det number of neutrons in time-window
prob_det = function(det, n1, n2,  b1, b2, b3, b4, b5, a1, a2, effn, effb, effr){
probTemp = 0
for (n1det in det:0) {
for (n2det in (det-n1det):0) {
for (b1det in (det-n1det-n2det):0) {
for (b2det in (det-n1det-n2det-b1det):0) {
for (b3det in (det-n1det-n2det-b1det-b2det):0) {
for (b4det in (det-n1det-n2det-b1det-b2det-b3det):0) {
for (b5det in (det-n1det-n2det-b1det-b2det-b3det-b4det):0) {
for (a1det in (det-n1det-n2det-b1det-b2det-b3det-b4det-b5det):0) {
a2det = det - n1det - n2det - b1det - b2det - b3det - b4det - b5det - a1det
probTemp = probTemp +
prob_det_sour(n1det, 1, n1, effn)*
prob_det_sour(n2det, 2, n2, effn)*
prob_det_sour(b1det, 1, b1, effb)*
prob_det_sour(b2det, 2, b2, effb)*
prob_det_sour(b3det, 3, b3, effb)*
prob_det_sour(b4det, 4, b4, effb)*
prob_det_sour(b5det, 5, b5, effb)*
prob_det_sour(a1det, 1, a1, effr)*
prob_det_sour(a2det, 2, a2, effr)
}
}
}
}
}
}
}
}
return( probTemp  )
}
# Function returning observation of the whole experiment
prob_observed = function(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr) {
p0 = prob_det(0, n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
p1 = prob_det(1, n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
p2 = prob_det(2, n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
p3 = prob_det(3, n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
prob_total = 1
for (i in 1:norma) {
prob_total = prob_total*p0^m0*p1^m1*p2^m2*p3^m3*(1-p0-p1-p2-p3)^(l-m0-m1-m2-m3)/tempNorm #*multiComb
}
return( prob_total )
}
beam_ratio = 1.0 # ratio of beam intensity between gas in and gas out runs
norma = 9854    # Term to normalize since the numbers are VERY small!
l = 1578389/norma
m1 = 15112/norma
m2 = 2104/norma
m3 = 253/norma
m0 = l-m1-m2-m3
# multiComb = factorial(l)/(factorial(m0)*factorial(m1)*factorial(m2)*factorial(m3))
factorCS = 1578389/(1.66307e+9*5.93e-8) # convert rate to mbarn
tempNorm = 1/3.8e4
prob_observed( 0.001299851, 2.137367e-05, 0.003428561, 0.0007211505, 8.599202e-05, 0, 0, 0.001, 0.018, 1,  1, 0.1763968 )
#prob_observed(0.001274395, 2.418441e-05, 0.00345778, 0.0007253758, 8.543755e-05, 0, 0, a1_mean, a2_mean,  1,  1, 0.1763968 )
# starting values n1, n2, eff....
fileName <- "~/Dropbox/Courses/R/alpha_n_85Rb/4.38MeV/prob_dist_beam.RData"
load(file = fileName)
prob_dist_beam = prob_dist
# plot_ly(data = prob_dist_beam, x = ~n1, y = ~eff, color = ~prob, size = ~prob)
# plot_ly(data = prob_dist_beam, x = ~n1, y = ~n2, color = ~prob, size = ~prob)
a1_mean = 200/factorCS
da1 =     50/factorCS
a2_mean = 288/factorCS
da2 =     20/factorCS
a1_mean = 200/factorCS
da1 =     50/factorCS
a2_mean = 288/factorCS
da2 =     20/factorCS
ptime <- system.time({
ind = rownames(prob_dist_beam)
table <- foreach(k=1:1000, .combine = rbind, .verbose = F, .errorhandling = "remove") %dopar% {
prob_dist = data.frame(
n1 = numeric(0),      # rate of room background event creating 1 neutron
n2 = numeric(0),      # rate of room background event creating 2 neutrons
b1 = numeric(0),      # rate of beam-induced background event creating 1 neutron
b2 = numeric(0),      # rate of beam-induced background event creating 2 neutrons
b3 = numeric(0),      # rate of beam-induced background event creating 3 neutrons
b4 = numeric(0),      # rate of beam-induced background event creating 4 neutrons
b5 = numeric(0),      # rate of beam-induced background event creating 5 neutrons
a1 = numeric(0),      # rate of reaction-induced event creating 1 neutron
a2 = numeric(0),      # rate of reaction-induced event creating 2 neutrons
effn = numeric(0),    # neutron detection efficiency room background neutrons
effb = numeric(0),    # neutron detection efficiency beam-induced background neutrons
effr = numeric(0),    # neutron detection efficiency reaction-induced neutrons
prob = numeric(0)     # probability
)
# Quantities obtained from MLH analysis of room and beam-induced background data
indx = sample(ind,1)
print(indx)
effn = prob_dist_beam[indx,"effn"]
effb = prob_dist_beam[indx,"effb"]
n1 =   prob_dist_beam[indx,"n1"]
n2 =   prob_dist_beam[indx,"n2"]
b1 =   prob_dist_beam[indx,"b1"]*beam_ratio
b2 =   prob_dist_beam[indx,"b2"]*beam_ratio
b3 =   prob_dist_beam[indx,"b3"]*beam_ratio
b4 =   prob_dist_beam[indx,"b4"]*beam_ratio
b5 =   prob_dist_beam[indx,"b5"]*beam_ratio
prob_dist[1, "n1"] = n1
prob_dist[1, "n2"] = n2
prob_dist[1, "b1"] = b1
prob_dist[1, "b2"] = b2
prob_dist[1, "b3"] = b3
prob_dist[1, "b4"] = b4
prob_dist[1, "b5"] = b5
# New quantities to be determined:
a1 = runif(1, 0*(a1_mean-da1), a1_mean+da1)
# a1 = 0
prob_dist[1, "a1"] = a1
a2 = runif(1, 0*(a2_mean-da2), a2_mean+da2)
# a2 = 0
prob_dist[1, "a2"] = a2
prob_dist[1, "effn"] = effn
prob_dist[1, "effb"] = effb
effr = runif(1, 0.17, 0.45)
#effr = 0.22
prob_dist[1, "effr"] = effr
prob_dist[1, "prob"] = prob_observed(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
#if (prob_dist[1, "prob"] > 1e-70) return ( prob_dist )
return ( prob_dist )
}
})[3]
print(ptime)
prob_dist = table
#prob_dist = rbind(prob_dist, prob_dist_cum)
#prob_dist_cum = prob_dist
prob_dist[,13]
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
prob_dist_beam
maxP = prob_dist[prob_dist$prob == max(prob_dist$prob),]
prob_dist = prob_dist[prob_dist$prob > maxP$prob*0.001,]
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
table <- foreach(k=1:10000, .combine = rbind, .verbose = F, .errorhandling = "remove") %dopar% {
prob_dist = data.frame(
n1 = numeric(0),      # rate of room background event creating 1 neutron
n2 = numeric(0),      # rate of room background event creating 2 neutrons
b1 = numeric(0),      # rate of beam-induced background event creating 1 neutron
b2 = numeric(0),      # rate of beam-induced background event creating 2 neutrons
b3 = numeric(0),      # rate of beam-induced background event creating 3 neutrons
b4 = numeric(0),      # rate of beam-induced background event creating 4 neutrons
b5 = numeric(0),      # rate of beam-induced background event creating 5 neutrons
a1 = numeric(0),      # rate of reaction-induced event creating 1 neutron
a2 = numeric(0),      # rate of reaction-induced event creating 2 neutrons
effn = numeric(0),    # neutron detection efficiency room background neutrons
effb = numeric(0),    # neutron detection efficiency beam-induced background neutrons
effr = numeric(0),    # neutron detection efficiency reaction-induced neutrons
prob = numeric(0)     # probability
)
# Quantities obtained from MLH analysis of room and beam-induced background data
indx = sample(ind,1)
print(indx)
effn = prob_dist_beam[indx,"effn"]
effb = prob_dist_beam[indx,"effb"]
n1 =   prob_dist_beam[indx,"n1"]
n2 =   prob_dist_beam[indx,"n2"]
b1 =   prob_dist_beam[indx,"b1"]*beam_ratio
b2 =   prob_dist_beam[indx,"b2"]*beam_ratio
b3 =   prob_dist_beam[indx,"b3"]*beam_ratio
b4 =   prob_dist_beam[indx,"b4"]*beam_ratio
b5 =   prob_dist_beam[indx,"b5"]*beam_ratio
prob_dist[1, "n1"] = n1
prob_dist[1, "n2"] = n2
prob_dist[1, "b1"] = b1
prob_dist[1, "b2"] = b2
prob_dist[1, "b3"] = b3
prob_dist[1, "b4"] = b4
prob_dist[1, "b5"] = b5
# New quantities to be determined:
a1 = runif(1, 0*(a1_mean-da1), a1_mean+da1)
# a1 = 0
prob_dist[1, "a1"] = a1
a2 = runif(1, 0*(a2_mean-da2), a2_mean+da2)
# a2 = 0
prob_dist[1, "a2"] = a2
prob_dist[1, "effn"] = effn
prob_dist[1, "effb"] = effb
effr = runif(1, 0.17, 0.45)
#effr = 0.22
prob_dist[1, "effr"] = effr
prob_dist[1, "prob"] = prob_observed(n1, n2, b1, b2, b3, b4, b5, a1, a2, effn, effb, effr)
#if (prob_dist[1, "prob"] > 1e-70) return ( prob_dist )
return ( prob_dist )
}
})[3]
print(ptime)
prob_dist = table
#prob_dist = rbind(prob_dist, prob_dist_cum)
#prob_dist_cum = prob_dist
prob_dist[,13]
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
maxP = prob_dist[prob_dist$prob == max(prob_dist$prob),]
prob_dist = prob_dist[prob_dist$prob > maxP$prob*0.001,]
a2a1CS <- plot_ly(data = prob_dist, x = ~a1*factorCS, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a1effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a1*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
a2effr <- plot_ly(data = prob_dist, x = ~effr, y = ~a2*factorCS, color = ~prob, size = ~prob,
text = ~paste0("Prob: ", format(prob,digits=2)),
type = 'scatter', mode = 'markers')
subplot( style(a2a1CS, showlegend = FALSE), style(a1effr, showlegend = FALSE), style(a2effr, showlegend = FALSE),
nrows = 3, margin = 0.01, titleX = T, titleY = T)
